Tasks 22Apr Morning :


		
<---------------RONI------------------->

ConsoleUI Class
	update GetPlayerName function to specify if it's the first Player or second.
	- fix PrintBoard function to be more organized and readable.
	Also, fix the spaces so the matrix will be more organized.
	Add Ex02.ConsoleUtils.Screen.Clear() to clear the screen
	
Game Class:
	GameOver method -> 
		*check RivalPlayer numOfDiscs
		*check if the RivalPlayer can move (running on m_CurrentHoldingSquareIndices) 
			(Under GameClass) *RivalPlayerCanMoveValidation() -> 
			/// *Amir*create 8 potential destination for each one-> MoveValidation(); (Under GameClass)
	
	GenerateMoveForComputer:
		m_CurrentPlayer.CurrentHoldingSquareIndices copy to local ListArr.
		For every random index -> 
		///*Amir* create 8 potential destination for each one -> MoveValidation()
		
	ScoreCalculator & winnerPlayer (GameResult)
	
	

TESTING!!! 



// <===================AMIR=================================>
 
1. 	*CheckersGameManager* 
	
	-Build function that initialize the relevant values/object bewteen singleGameSession
	- Conitune RecurringTurnProcedure -> first 2 bullets in MoveManager
	- Build PostMoveProcedure
	

2.	*MoveManager* 
	*Complete PossibilityValidation
	*Build RecurringTurnMoveValidation
	*Converting to king method
	
3.	*Game*
	
	-Build GameWinner function
	-PostSingleGameSession function 
		*calculating score to the winnerPlayer
		*Setting the board again?
	-Build function to generate a move for computer
		*consider use IF computer 
			-> generate random source index from player m_CurrentHoldingSquareIndices?
		*ELSE 
			-> RawInputProcedure
			
4. *ConsoleInputManager*
	-Separate sourceIndex and DestinationIndex from the class
	-Handle Quitting option (key Q)
		*Update the data memebers
		*return a flag or something.
		
5.	***General***
	-Check enum structure
	-AI
	-using namespaces correctly
		

		
<======================================>
General:

1. Quit option -> both from moveInput at the end of singleGameSession
	*InCheckersGame Manager handle it

2. GameOver -> 
	*check RivalPlayer numOfDiscs
	*check if the RivalPlayer can move (running on m_CurrentHoldingSquareIndices) 
		(Under GameClass) *RivalPlayerCanMoveValidation() -> create 8 potential destination for each one-> MoveValidation(); (Under GameClass)
	
3. GenerateMoveForComputer:
	 m_CurrentPlayer.CurrentHoldingSquareIndices copy to local ListArr.
	 For every random index -> // create 8 potential destination for each one -> MoveValidation()
	
	
	----> Amir:
		AnyMovePossibilty For All Indices of player
		